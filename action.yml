name: 'Terraform Actions Collection'
description: 'Run actions for Terraform Project'
author: 'drew.mercer'
inputs:
  ACTION:
    description: 'Action to run'
    required: true
  TERRAFORM_VERSION:
    description: 'Terraform Version'
    required: true
  PROJECT_ID: 
    description: 'Project ID'
    required: true
  GITHUB_TOKEN: 
    description: 'Github Token'
    required: true
  GITHUB_ISSUE:
    description: 'Github Event'
    required: true
  NPM_TOKEN: 
    description: 'NPM Token'
    required: true
  GITHUB_APP_CLOUDBUILD_INSTALLATION_ID: 
    description: 'Github App Cloud Build Installation ID'
    required: true
  CLOUDFLARE_API_TOKEN: 
    description: 'Cloudflare API Token'
    required: true
  DATADOG_API_KEY: 
    description: 'Datadog API Key'
    required: true
  DATADOG_APP_KEY: 
    description: 'Datadog App Key'
    required: true
  DIRECTORY: 
    description: 'Directory to run Terraform in'
    required: true

runs:
  using: "composite"
  steps:
  - uses: hashicorp/setup-terraform@v3
    with:
      terraform_version: ${{ inputs.TERRAFORM_VERSION}}

  - id: init
    run: |
      terraform -chdir=${{ inputs.directory }} init
    shell: bash

  - name: terraform init status
    if: steps.init.outcome == 'failure' 
    run: |
      exit 1
    shell: bash

  - id: lint
    run: |
      terraform -chdir=${{ inputs.directory }} fmt -check -diff -recursive .
    shell: bash

  - name: verify terraform lint
    if: steps.lint.outcome == 'failure'
    run: |
      exit 1
    shell: bash

  - name: validate
    run: |
      terraform -chdir=${{ inputs.directory }} validate -no-color
    shell: bash

  - name: verify terraform validate
    if: steps.validate.outcome == 'failure'
    run: |
      exit 1
    shell: bash

  - id: plan
    continue-on-error: true
    env:
      TERRAFORM_VERSION: ${{ inputs.TERRAFORM_VERSION }}
      TF_VAR_PROJECT_ID: ${{ inputs.PROJECT_ID }}
      TF_VAR_GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      TF_VAR_NPM_TOKEN: ${{ inputs.NPM_TOKEN }}
      TF_VAR_GITHUB_APP_CLOUDBUILD_INSTALLATION_ID: ${{ inputs.GITHUB_APP_CLOUDBUILD_INSTALLATION_ID }}
      TF_VAR_CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
      TF_VAR_DATADOG_API_KEY: ${{ inputs.DATADOG_API_KEY }}
      TF_VAR_DATADOG_APP_KEY: ${{ inputs.DATADOG_APP_KEY }}
    run: |
      set +e
      cd ${{ inputs.directory }} && \
      terraform plan -input=false -no-color -out=tfplan
      terraform show -no-color tfplan
    shell: bash

  - name: verify terraform plan
    if: steps.plan.outcome == 'failure'
    run: |
      echo "terraform plan failed"
      exit 1
    shell: bash

  - id: format_plan
    if: inputs.ACTION == 'plan'
    run: |
      echo -e '## ${{ inputs.DIRECTORY }} plan\n' > ${{ inputs.DIRECTORY }}/plan.txt
      echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
      | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' >> ${{ inputs.DIRECTORY }}/plan.txt
      if grep -Fxq "No changes. Your infrastructure matches the configuration." ${{ inputs.DIRECTORY }}/plan.txt
      then
          echo "change_detected=false" >> $GITHUB_OUTPUT
      else
          echo "change_detected=true" >> $GITHUB_OUTPUT
      fi
    shell: bash

  # - uses: peter-evans/create-or-update-comment@v3 
  #   if: steps.format_plan.outputs.change_detected == 'true'
  #   id: post_plan
  #   with:
  #     issue-number: ${{ inputs.GITHUB_ISSUE }}
  #     body-path: ${{ inputs.directory }}/plan.txt
  #           #       ## ${{ env.AWS_ACCOUNT_NAME }} plan
  #           # ```diff
  #           # ${{ env.PLAN }}

  - name: Post Plan to GitHub PR
    uses: mshick/add-pr-comment@v2
    with:
      allow-repeats: true
      repo-token: ${{ secrets.GITHUB_TOKEN }}
      repo-token-user-login: 'github-actions[bot]'
      message-path: ${{ inputs.directory }}/plan.txt

  - id: apply
    if: inputs.ACTION == 'apply'
    continue-on-error: true
    run: |
      terraform -chdir=${{ inputs.directory }} apply \
        -input=false \
        -no-color \
        tfplan
    shell: bash

  - if: steps.apply.outcome == 'failure' 
    run: |
      echo "terraform apply failed"
      exit 1
    shell: bash

